generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  User     User   @relation(fields: [userId], references: [id])
  userId   String @unique @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  surname       String?
  username      String?   @unique
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    Int?
  Student       Student?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Teacher       Teacher?
  Admin         Admin?
  Session       Session[]
  Account       Account[]
}

model Session {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt      DateTime
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Student {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?
  address     String
  image       String
  bloodType   String
  gender      UserGender?
  createdAt   DateTime     @default(now())
  parentName  String
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     String       @db.ObjectId
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  User        User         @relation(fields: [userId], references: [id])
  userId      String       @unique @db.ObjectId
}

model Teacher {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  surname    String?
  username   String?     @unique
  email      String      @unique
  phone      String?
  image      String?
  bloodType  String?
  gender     UserGender?
  address    String
  createdAt  DateTime    @default(now())
  subjectIDs String[]    @db.ObjectId
  subjects   Subject[]   @relation(fields: [subjectIDs], references: [id])
  lessons    Lesson[]
  classes    Class[]
  birthday   DateTime
  User       User        @relation(fields: [userId], references: [id])
  userId     String      @unique @db.ObjectId
}

model Grade {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  level    String    @unique
  students Student[]
  classess Class[]
}

model Class {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String @unique
  capacity Int

  supervisorId  String?        @db.ObjectId
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       String         @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  teachersIDs String[]  @db.ObjectId
  teachers    Teacher[] @relation(fields: [teachersIDs], references: [id])
  lessons     Lesson[]
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   String       @db.ObjectId
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     String       @db.ObjectId
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String       @db.ObjectId
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId String   @db.ObjectId
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId String   @db.ObjectId
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  score Int

  examId       String?     @db.ObjectId
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId String?     @db.ObjectId
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @db.ObjectId
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime
  present Boolean

  studentId String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  String  @db.ObjectId
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  startTime   DateTime
  endTime     DateTime
  classId String? @db.ObjectId
  class   Class?  @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime

  classId String? @db.ObjectId
  class   Class?  @relation(fields: [classId], references: [id])
}

enum UserGender {
  MALE
  FEMALE
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
  USER
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
